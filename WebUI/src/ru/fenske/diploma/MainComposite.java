package ru.fenske.diploma;

import com.vaadin.annotations.AutoGenerated;
import com.vaadin.ui.AbsoluteLayout;
import com.vaadin.ui.Button;
import com.vaadin.ui.CustomComponent;
import com.vaadin.ui.GridLayout;
import com.vaadin.ui.HorizontalSplitPanel;
import com.vaadin.ui.TextField;

public class MainComposite extends CustomComponent {

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	@AutoGenerated
	private AbsoluteLayout mainLayout;
	@AutoGenerated
	private HorizontalSplitPanel horizontalSplitPanel_1;
	@AutoGenerated
	private GridLayout gridLayout_2;
	@AutoGenerated
	private TextField textFieldSearch;
	@AutoGenerated
	private Button buttonSearch;
	@AutoGenerated
	private GridLayout gridLayout_1;
	@AutoGenerated
	private Button buttonAnnotator;
	@AutoGenerated
	private Button buttonSynchronizer;
	/**
	 * The constructor should first build the main layout, set the
	 * composition root and then do any custom initialization.
	 *
	 * The constructor will not be automatically regenerated by the
	 * visual editor.
	 */
	public MainComposite() {
		buildMainLayout();
		setCompositionRoot(mainLayout);

		// TODO add user code here
	}

	@AutoGenerated
	private AbsoluteLayout buildMainLayout() {
		// common part: create layout
		mainLayout = new AbsoluteLayout();
		mainLayout.setImmediate(false);
		mainLayout.setWidth("100%");
		mainLayout.setHeight("100%");
		
		// top-level component properties
		setWidth("100.0%");
		setHeight("100.0%");
		
		// horizontalSplitPanel_1
		horizontalSplitPanel_1 = buildHorizontalSplitPanel_1();
		mainLayout
				.addComponent(horizontalSplitPanel_1, "top:0.0px;left:0.0px;");
		
		return mainLayout;
	}

	@AutoGenerated
	private HorizontalSplitPanel buildHorizontalSplitPanel_1() {
		// common part: create layout
		horizontalSplitPanel_1 = new HorizontalSplitPanel();
		horizontalSplitPanel_1.setImmediate(false);
		horizontalSplitPanel_1.setWidth("100.0%");
		horizontalSplitPanel_1.setHeight("100.0%");
		
		// gridLayout_1
		gridLayout_1 = buildGridLayout_1();
		horizontalSplitPanel_1.addComponent(gridLayout_1);
		
		// gridLayout_2
		gridLayout_2 = buildGridLayout_2();
		horizontalSplitPanel_1.addComponent(gridLayout_2);
		
		return horizontalSplitPanel_1;
	}

	@AutoGenerated
	private GridLayout buildGridLayout_1() {
		// common part: create layout
		gridLayout_1 = new GridLayout();
		gridLayout_1.setImmediate(false);
		gridLayout_1.setWidth("100.0%");
		gridLayout_1.setHeight("-1px");
		gridLayout_1.setMargin(true);
		gridLayout_1.setSpacing(true);
		gridLayout_1.setRows(2);
		
		// buttonSynchronizer
		buttonSynchronizer = new Button();
		buttonSynchronizer.setCaption("Синхронизатор");
		buttonSynchronizer.setImmediate(false);
		buttonSynchronizer.setWidth("100.0%");
		buttonSynchronizer.setHeight("-1px");
		gridLayout_1.addComponent(buttonSynchronizer, 0, 0);
		
		// buttonAnnotator
		buttonAnnotator = new Button();
		buttonAnnotator.setCaption("Аннотатор");
		buttonAnnotator.setImmediate(false);
		buttonAnnotator.setWidth("100.0%");
		buttonAnnotator.setHeight("-1px");
		gridLayout_1.addComponent(buttonAnnotator, 0, 1);
		
		return gridLayout_1;
	}

	@AutoGenerated
	private GridLayout buildGridLayout_2() {
		// common part: create layout
		gridLayout_2 = new GridLayout();
		gridLayout_2.setImmediate(false);
		gridLayout_2.setWidth("100.0%");
		gridLayout_2.setHeight("-1px");
		gridLayout_2.setMargin(true);
		gridLayout_2.setSpacing(true);
		gridLayout_2.setColumns(2);
		
		// buttonSearch
		buttonSearch = new Button();
		buttonSearch.setCaption("Поиск");
		buttonSearch.setImmediate(false);
		buttonSearch.setWidth("-1px");
		buttonSearch.setHeight("-1px");
		gridLayout_2.addComponent(buttonSearch, 0, 0);
		
		// textFieldSearch
		textFieldSearch = new TextField();
		textFieldSearch.setImmediate(false);
		textFieldSearch.setWidth("100.0%");
		textFieldSearch.setHeight("-1px");
		gridLayout_2.addComponent(textFieldSearch, 1, 0);
		
		return gridLayout_2;
	}

}
