package ru.fenske.diploma;

import com.vaadin.annotations.AutoGenerated;
import com.vaadin.server.Sizeable;
import com.vaadin.ui.AbsoluteLayout;
import com.vaadin.ui.Alignment;
import com.vaadin.ui.Button;
import com.vaadin.ui.CustomComponent;
import com.vaadin.ui.GridLayout;
import com.vaadin.ui.HorizontalSplitPanel;
import com.vaadin.ui.TextField;

public class MainComposite extends CustomComponent {

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	@AutoGenerated
	private AbsoluteLayout mainLayout;
	@AutoGenerated
	private HorizontalSplitPanel horizontalSplitPanel_1;
	@AutoGenerated
	private GridLayout gridLayoutSearch;
	@AutoGenerated
	private TextField textFieldSearch;
	@AutoGenerated
	private Button buttonSearch;
	@AutoGenerated
	private GridLayout gridLayoutProps;
	@AutoGenerated
	private Button buttonAnnotator;
	@AutoGenerated
	private Button buttonSynchronizer;
	public Button getButtonAnnotator() {
		return buttonAnnotator;
	}

	public Button getButtonSynchronizer() {
		return buttonSynchronizer;
	}

	/**
	 * The constructor should first build the main layout, set the
	 * composition root and then do any custom initialization.
	 *
	 * The constructor will not be automatically regenerated by the
	 * visual editor.
	 */
	public MainComposite() {
		buildMainLayout();
		setCompositionRoot(mainLayout);

		// TODO add user code here
	}

	@AutoGenerated
	private AbsoluteLayout buildMainLayout() {
		// common part: create layout
		mainLayout = new AbsoluteLayout();
		mainLayout.setImmediate(false);
		mainLayout.setWidth("100%");
		mainLayout.setHeight("100%");
		
		// top-level component properties
		setWidth("100.0%");
		setHeight("100.0%");
		
		// horizontalSplitPanel_1
		horizontalSplitPanel_1 = buildHorizontalSplitPanel_1();
		mainLayout
				.addComponent(horizontalSplitPanel_1, "top:0.0px;left:0.0px;");
		
		return mainLayout;
	}

	@SuppressWarnings("deprecation")
	@AutoGenerated
	private HorizontalSplitPanel buildHorizontalSplitPanel_1() {
		// common part: create layout
		horizontalSplitPanel_1 = new HorizontalSplitPanel();
		horizontalSplitPanel_1.setImmediate(false);
		horizontalSplitPanel_1.setWidth("100.0%");
		horizontalSplitPanel_1.setHeight("100.0%");
		horizontalSplitPanel_1.setSplitPosition(20, Sizeable.UNITS_PERCENTAGE);
		
		// gridLayoutProps
		gridLayoutProps = buildGridLayoutProps();
		horizontalSplitPanel_1.addComponent(gridLayoutProps);
		
		// gridLayoutSearch
		gridLayoutSearch = buildGridLayoutSearch();
		horizontalSplitPanel_1.addComponent(gridLayoutSearch);
		
		return horizontalSplitPanel_1;
	}

	@AutoGenerated
	private GridLayout buildGridLayoutProps() {
		// common part: create layout
		gridLayoutProps = new GridLayout();
		gridLayoutProps.setImmediate(false);
		gridLayoutProps.setWidth("100.0%");
		gridLayoutProps.setHeight("-1px");
		gridLayoutProps.setMargin(true);
		gridLayoutProps.setSpacing(true);
		gridLayoutProps.setRows(2);	
		
		gridLayoutProps.setColumnExpandRatio(0, 0.5f);
		gridLayoutProps.setColumnExpandRatio(1, 0.5f);		
		
		// buttonSynchronizer
		buttonSynchronizer = new Button();
		buttonSynchronizer.setCaption("Синхронизатор");
		buttonSynchronizer.setImmediate(true);
		buttonSynchronizer.setWidth("100.0%");
		buttonSynchronizer.setHeight("-1px");
		gridLayoutProps.addComponent(buttonSynchronizer, 0, 0);
		
		// buttonAnnotator
		buttonAnnotator = new Button();
		buttonAnnotator.setCaption("Аннотатор");
		buttonAnnotator.setImmediate(true);
		buttonAnnotator.setWidth("100.0%");
		buttonAnnotator.setHeight("-1px");
		gridLayoutProps.addComponent(buttonAnnotator, 0, 1);
		
		return gridLayoutProps;
	}

	@AutoGenerated
	private GridLayout buildGridLayoutSearch() {
		// common part: create layout
//		gridLayoutSearch = new GridLayout();
//		gridLayoutSearch.setImmediate(false);
//		gridLayoutSearch.setWidth("100.0%");
//		gridLayoutSearch.setHeight("-1px");
//		gridLayoutSearch.setMargin(true);
//		gridLayoutSearch.setSpacing(true);
//		gridLayoutSearch.setColumns(2);
		
		gridLayoutSearch = new GridLayout(1,2);
		gridLayoutSearch.setWidth("100.0%");
		gridLayoutSearch.setSpacing(true);
		gridLayoutSearch.setMargin(true);
		
		// buttonSearch
		buttonSearch = new Button();
		buttonSearch.setCaption("Поиск");
//		buttonSearch.setImmediate(true);
//		buttonSearch.setWidth("-1px");
//		buttonSearch.setHeight("-1px");
		gridLayoutSearch.addComponent(buttonSearch, 0, 1);
		gridLayoutSearch.setComponentAlignment(buttonSearch, Alignment.TOP_CENTER);	
		buttonSearch.setWidth("10%");
		
		// textFieldSearch
		textFieldSearch = new TextField();
//		textFieldSearch.setImmediate(false);
//		textFieldSearch.setWidth("100.0%");
//		textFieldSearch.setHeight("-1px");
		gridLayoutSearch.addComponent(textFieldSearch, 0, 0);
		gridLayoutSearch.setComponentAlignment(textFieldSearch, Alignment.TOP_CENTER);
		textFieldSearch.setWidth("40%");
		
		return gridLayoutSearch;
	}

}
