package ru.fenske.diploma;

import com.vaadin.annotations.AutoGenerated;
import com.vaadin.ui.AbsoluteLayout;
import com.vaadin.ui.Button;
import com.vaadin.ui.CustomComponent;
import com.vaadin.ui.GridLayout;
import com.vaadin.ui.Label;
import com.vaadin.ui.TextField;

public class DataBaseComposite extends CustomComponent {

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	@AutoGenerated
	private AbsoluteLayout mainLayout;
	@AutoGenerated
	private GridLayout gridLayout_1;
	@AutoGenerated
	private Button buttonInsert;
	@AutoGenerated
	private TextField uriText;
	@AutoGenerated
	private Label label_1;
	@AutoGenerated
	private TextField authorText;
	@AutoGenerated
	private Label label_4;
	@AutoGenerated
	private TextField nameText;
	@AutoGenerated
	private Label label_3;
	/**
	 * The constructor should first build the main layout, set the
	 * composition root and then do any custom initialization.
	 *
	 * The constructor will not be automatically regenerated by the
	 * visual editor.
	 */
	public DataBaseComposite() {
		buildMainLayout();
		setCompositionRoot(mainLayout);

		// TODO add user code here
	}

	public Button getButtonInsert() {
		return buttonInsert;
	}

	public AbsoluteLayout getMainLayout() {
		return mainLayout;
	}

	public GridLayout getGridLayout_1() {
		return gridLayout_1;
	}

	public TextField getUriText() {
		return uriText;
	}

	public Label getLabel_1() {
		return label_1;
	}

	public TextField getAuthorText() {
		return authorText;
	}

	public Label getLabel_4() {
		return label_4;
	}

	public TextField getNameText() {
		return nameText;
	}

	public Label getLabel_3() {
		return label_3;
	}

	@AutoGenerated
	private AbsoluteLayout buildMainLayout() {
		// common part: create layout
		mainLayout = new AbsoluteLayout();
		mainLayout.setImmediate(false);
		mainLayout.setWidth("100%");
		mainLayout.setHeight("100%");
		
		// top-level component properties
		setWidth("100.0%");
		setHeight("100.0%");
		
		// gridLayout_1
		gridLayout_1 = buildGridLayout_1();
		mainLayout.addComponent(gridLayout_1,
				"top:0.0px;right:0%;bottom:528.0px;left:40%;");
		
		return mainLayout;
	}

	@AutoGenerated
	private GridLayout buildGridLayout_1() {
		// common part: create layout
		gridLayout_1 = new GridLayout();
		gridLayout_1.setImmediate(false);
		gridLayout_1.setWidth("-1px");
		gridLayout_1.setHeight("-1px");
		gridLayout_1.setMargin(true);
		gridLayout_1.setSpacing(true);
		gridLayout_1.setColumns(2);
		gridLayout_1.setRows(4);
		
		// label_3
		label_3 = new Label();
		label_3.setImmediate(false);
		label_3.setWidth("-1px");
		label_3.setHeight("-1px");
		label_3.setValue("Название");
		gridLayout_1.addComponent(label_3, 0, 0);
		
		// nameText
		nameText = new TextField();
		nameText.setImmediate(false);
		nameText.setWidth("-1px");
		nameText.setHeight("-1px");
		gridLayout_1.addComponent(nameText, 1, 0);
		
		// label_4
		label_4 = new Label();
		label_4.setImmediate(false);
		label_4.setWidth("-1px");
		label_4.setHeight("-1px");
		label_4.setValue("Автор");
		gridLayout_1.addComponent(label_4, 0, 1);
		
		// authorText
		authorText = new TextField();
		authorText.setImmediate(false);
		authorText.setWidth("-1px");
		authorText.setHeight("-1px");
		gridLayout_1.addComponent(authorText, 1, 1);
		
		// label_1
		label_1 = new Label();
		label_1.setImmediate(false);
		label_1.setWidth("32px");
		label_1.setHeight("18px");
		label_1.setValue("Файл");
		gridLayout_1.addComponent(label_1, 0, 2);
		
		// uriText
		uriText = new TextField();
		uriText.setImmediate(false);
		uriText.setWidth("-1px");
		uriText.setHeight("-1px");
		gridLayout_1.addComponent(uriText, 1, 2);
		
		// buttonInsert
		buttonInsert = new Button();
		buttonInsert.setCaption("Добавить документ");
		buttonInsert.setImmediate(true);
		buttonInsert.setWidth("-1px");
		buttonInsert.setHeight("-1px");
		gridLayout_1.addComponent(buttonInsert, 0, 3);
		
		return gridLayout_1;
	}

}
